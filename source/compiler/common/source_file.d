module compiler.common.source_file;

import compiler.frontend.scanner;
import compiler.common.nodes;
import compiler.common.ir;
import compiler.common.diagnostic;
import compiler.common.file_location;
import config;

import std.file;

/// A structure that represents a source file.
struct SourceFile
{
    /// The path to that source file.
    string path;
    
    /// The content of the file.
    string content;

    /// The scanner of the file.
    Scanner scanner;

    /// All the Abstract Syntax Tree nodes generated by the parser
    /// for this source file.
    Node[] nodes;

    /// All the function definitions in this file.
    Definition[string] definitions;
    
    /// The current definition we are in.
    Definition *definition;

    /// The stack of registers in this file.
    Register*[] registerStack;

    /// A stack of types used for type checking.
    Type[] typeStack;

    /// A stack of nodes used for type checking.
    Node[] nodeStack;

    /**
        Creates a source file structure.

        Params:
            path = The path to the source file.
    */ 
    this(string path)
    {
        this.path = path;
        
        // Read the file's content
        content = readText(this.path);

        // Append a null terminator to the content,
        // so the scanner knows when to stop.
        content ~= '\0';

        // Create a scanner structure for this source file.
        scanner = Scanner(content.ptr);
    }

    /*
        Creates warning diagnostic.

        Params:
            location = The file location of the diagnostic.
            message  = The message of the diagnostic.
    */ 
    void warning(FileLocation location, string message)
    {
        gDiagnostics ~= Diagnostic(DiagnosticKind.Warning,
                                   path, 
                                   location,
                                   message);
    }

    /*
        Creates note diagnostic.

        Params:
            location = The file location of the diagnostic.
            message  = The message of the diagnostic.
    */ 
    void note(FileLocation location, string message)
    {
        gDiagnostics ~= Diagnostic(DiagnosticKind.Note,
                                   path, 
                                   location,
                                   message);
    }

    /*
        Creates error diagnostic.

        Params:
            location = The file location of the diagnostic.
            message  = The message of the diagnostic.
    */ 
    void error(FileLocation location, string message)
    {
        gHasFatalErrors  = true;
        gDiagnostics    ~= Diagnostic(DiagnosticKind.Error,
                                      path, 
                                      location,
                                      message);
    }
}